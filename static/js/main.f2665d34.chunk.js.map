{"version":3,"sources":["reducers/navigationReducer.js","components/navigation.js","reducers/goldReducer.js","components/currency.js","components/home.js","components/shopItem.js","components/shop.js","App.js","serviceWorker.js","index.js"],"names":["navigationReducer","state","arguments","length","undefined","type","mapDispatchToProps","navigate","key","connect","navigation","props","react_default","a","createElement","row","justify","menu","style","width","defaultSelectedKeys","mode","onSelect","Item","goldReducer","incrementGold","currency","col","es_button","onClick","Home","ShopItem","label","Shop","shopItem","className","home","shop","display","Boolean","window","location","hostname","match","reducer","combineReducers","store","createStore","render","ReactDOM","es","src_App_0","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2665d34.chunk.js","sourcesContent":["const navigationReducer = (state = 'home', action) => {\r\n  switch (action.type) {\r\n    case '1':\r\n      return 'home';\r\n    case '2':\r\n      return 'shop';\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const navigate = key => (\r\n  {\r\n    type: key,\r\n  }\r\n);\r\n\r\nexport default navigationReducer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Menu } from 'antd';\r\nimport { navigate } from '../reducers/navigationReducer';\r\n\r\nconst Navigation = (props) => {\r\n  const handleClick = (menu) => {\r\n    props.navigate(menu.key);\r\n  };\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Menu\r\n        style={{ width: 256 }}\r\n        defaultSelectedKeys={['1']}\r\n        mode=\"horizontal\"\r\n        onSelect={handleClick}\r\n      >\r\n        <Menu.Item key=\"1\">Home</Menu.Item>\r\n        <Menu.Item key=\"2\">Shop</Menu.Item>\r\n      </Menu>\r\n    </Row>\r\n\r\n  );\r\n};\r\nconst mapStateToProps = state => (\r\n  {\r\n    navigation: state.navigation,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    navigate,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\r\n","const goldReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT': {\r\n      return state + 1;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const incrementGold = () => (\r\n  {\r\n    type: 'INCREMENT',\r\n  }\r\n);\r\n\r\nexport default goldReducer;\r\n","import React from 'react';\r\nimport { Row, Col, Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { incrementGold } from '../reducers/goldReducer';\r\n\r\nconst Currency = (props) => {\r\n  const handleClick = () => {\r\n    props.incrementGold();\r\n  };\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Col>\r\n        <Row type=\"flex\" justify=\"center\">{props.currency}</Row>\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <Button onClick={handleClick}>Increment</Button>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    currency: state.currency,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    incrementGold,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);\r\n","import React from 'react';\r\nimport Currency from './currency';\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <Currency />\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nconst ShopItem = (props) => {\r\n  return (\r\n    <Button>{props.label}</Button>\r\n  )\r\n}\r\n\r\nexport default ShopItem;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport ShopItem from './shopItem';\r\nconst Shop = (props) => {\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <ShopItem \r\n        label=\"yeet\"\r\n      />\r\n       <ShopItem \r\n        label=\"yeeter\"\r\n      />\r\n       <ShopItem \r\n        label=\"ultra yeet\"\r\n      />\r\n       <ShopItem \r\n        label=\"yeetadakimasu\"\r\n      />\r\n\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Shop;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport Navigation from './components/navigation';\r\nimport Home from './components/home';\r\nimport Shop from './components/shop';\r\n\r\nconst App = (props) => {\r\n  const display = () => {\r\n    switch (props.navigation) {\r\n      case 'home':\r\n        return <Home />;\r\n      case 'shop':\r\n        return <Shop />;\r\n      default:\r\n        return <Home />;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Yeet Clicker 2000</h2>\r\n      <Navigation />\r\n      {display()}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    navigation: state.navigation,\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { combineReducers, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport goldReducer from './reducers/goldReducer';\r\nimport navigationReducer from './reducers/navigationReducer';\r\n\r\nconst reducer = combineReducers({\r\n  currency: goldReducer,\r\n  navigation: navigationReducer,\r\n});\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst render = () => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n  );\r\n};\r\n\r\nrender();\r\nstore.subscribe(render);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}