{"version":3,"sources":["reducers/navigationReducer.js","components/home.js","reducers/currencyReducer.js","reducers/intervalReducer.js","components/shopItem.js","components/shop.js","components/navigation.js","components/currency.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["navigationReducer","state","arguments","length","undefined","type","Home","props","react_default","a","createElement","updateCurrency","currency","currencyReducer","action","console","log","updateInterval","rate","intervalReducer","mapDispatchToProps","connect","interval","row","cost","justify","es_button","onClick","currencyValue","newPurchase","Object","toConsumableArray","purchased","index","setCurrencyValue","setPurchased","Shop","TabPane","Tabs","tabs","tabPosition","tab","concat","key","shopItem","navigate","navigation","defaultActiveKey","style","width","home","shop","col","useInterval","callback","delay","savedCallBack","useRef","useEffect","current","id","setInterval","clearInterval","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","className","Boolean","window","location","hostname","match","reducer","combineReducers","store","createStore","render","getState","ReactDOM","es","src_App_0","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51be8836.chunk.js","sourcesContent":["const navigationReducer = (state = 'home', action) => {\r\n  switch (action.type) {\r\n    case '1':\r\n      return 'home';\r\n    case '2':\r\n      return 'shop';\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const navigate = key => (\r\n  {\r\n    type: key,\r\n  }\r\n);\r\n\r\nexport default navigationReducer;\r\n","import React from 'react';\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","const currencyReducer = (state = 0, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case 'INCREMENT': {\r\n      return action.currency;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const updateCurrency = currency => (\r\n  {\r\n    type: 'INCREMENT',\r\n    currency,\r\n  }\r\n);\r\n\r\nexport default currencyReducer;\r\n","const intervalReducer = (state = 0, action) => {\r\n  if (action.type === 'NEW') {\r\n    return state + action.rate;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport const updateInterval = rate => (\r\n  {\r\n    type: 'NEW',\r\n    rate,\r\n  }\r\n);\r\n\r\nexport default intervalReducer;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Row } from 'antd';\r\nimport { updateCurrency } from '../reducers/currencyReducer';\r\nimport { updateInterval } from '../reducers/intervalReducer';\r\n\r\nconst ShopItem = (props) => {\r\n\r\n  const handlePurchase = () => {\r\n    if (props.currencyValue >= props.cost) {\r\n      const newPurchase = [...props.purchased];\r\n      newPurchase[props.index] += 1;\r\n      props.updateCurrency(props.currencyValue - props.cost);\r\n      props.updateInterval(props.rate);\r\n      props.setCurrencyValue(props.currencyValue - props.cost);\r\n      props.setPurchased(newPurchase);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        purchasing this item will increase your clicks by {props.rate} per second and cost {props.cost}\r\n      </Row>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Button onClick={handlePurchase}>Purchase</Button>\r\n      </Row>\r\n      \r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    interval: state.interval,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    updateCurrency,\r\n    updateInterval,\r\n  }\r\n);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopItem);\r\n","import React from 'react';\r\nimport { Row, Tabs } from 'antd';\r\nimport ShopItem from './shopItem';\r\n\r\nconst Shop = (props) => {\r\n  const { TabPane } = Tabs;\r\n\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"start\">\r\n        <Tabs\r\n          tabPosition=\"left\"\r\n      >\r\n          <TabPane tab={`Clicker ${props.purchased[0]}`} key=\"1\" >\r\n            <ShopItem \r\n              cost={10}\r\n              currencyValue={props.currencyValue}\r\n              setCurrencyValue={props.setCurrencyValue}\r\n              purchased={props.purchased}\r\n              setPurchased={props.setPurchased}\r\n              rate={1}\r\n              index={0}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab={`Fast Clicker ${props.purchased[1]}`} key=\"2\" >\r\n            <ShopItem \r\n                cost={200}\r\n                currencyValue={props.currencyValue}\r\n                setCurrencyValue={props.setCurrencyValue}\r\n                purchased={props.purchased}\r\n                setPurchased={props.setPurchased}\r\n                rate={15}\r\n                index={1}\r\n              />\r\n          </TabPane>\r\n          <TabPane tab={`Faster Clicker ${props.purchased[2]}`} key=\"3\" >\r\n            <ShopItem \r\n                cost={1500}\r\n                currencyValue={props.currencyValue}\r\n                setCurrencyValue={props.setCurrencyValue}\r\n                purchased={props.purchased}\r\n                setPurchased={props.setPurchased}\r\n                rate={50}\r\n                index={2}\r\n              />\r\n          </TabPane>\r\n          <TabPane tab={`Fastest Clicker ${props.purchased[3]}`} key=\"4\" >\r\n            <ShopItem \r\n                cost={10000}\r\n                currencyValue={props.currencyValue}\r\n                setCurrencyValue={props.setCurrencyValue}\r\n                purchased={props.purchased}\r\n                setPurchased={props.setPurchased}\r\n                rate={100}\r\n                index={3}\r\n              />\r\n          </TabPane>\r\n        </Tabs>\r\n\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Shop;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Tabs } from 'antd';\r\nimport { navigate } from '../reducers/navigationReducer';\r\nimport Home from './home';\r\nimport Shop from './shop';\r\n\r\nconst Navigation = (props) => {\r\n  const { TabPane } = Tabs;\r\n\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Tabs defaultActiveKey=\"1\" style={ {width: 500 }}>\r\n        <TabPane tab=\"Home\" key=\"1\">\r\n          <Home />\r\n        </TabPane>\r\n        <TabPane tab=\"Shop\" key=\"2\">\r\n          <Shop\r\n            currencyValue = {props.currencyValue}\r\n            setCurrencyValue = {props.setCurrencyValue}\r\n            purchased={props.purchased}\r\n            setPurchased={props.setPurchased}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </Row>\r\n\r\n  );\r\n};\r\nconst mapStateToProps = state => (\r\n  {\r\n    navigation: state.navigation,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    navigate,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\r\n","import React from 'react';\r\nimport { Row, Col, Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { updateCurrency } from '../reducers/currencyReducer';\r\nimport { updateInterval } from '../reducers/intervalReducer';\r\n\r\nconst Currency = (props) => {\r\n\r\n  const handleClick = () => {\r\n    props.setCurrencyValue(props.currencyValue + 1);\r\n\r\n  };\r\n\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\">\r\n      <Col>\r\n        <Row type=\"flex\" justify=\"center\">{props.currencyValue}</Row>\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <Button onClick={handleClick}>Increment</Button>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    currency: state.currency,\r\n    interval: state.interval,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    updateCurrency,\r\n    updateInterval,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallBack = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallBack.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      savedCallBack.current();\r\n    };\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n\r\nexport default useInterval;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport Navigation from './components/navigation';\r\nimport Currency from './components/currency';\r\nimport { updateInterval } from './reducers/intervalReducer';\r\nimport { useInterval } from './hooks/useInterval';\r\n\r\nconst App = (props) => {\r\n  const [currencyValue, setCurrencyValue] = useState(0);\r\n  const [purchased, setPurchased] = useState([0, 0, 0, 0]);\r\n\r\n  useInterval(() => {\r\n    setCurrencyValue(currencyValue + props.interval);\r\n  }, 1000);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Simple Clicker</h2>\r\n      <Navigation \r\n        currencyValue={currencyValue}\r\n        setCurrencyValue={setCurrencyValue}\r\n        purchased={purchased}\r\n        setPurchased={setPurchased}\r\n      />\r\n      <Currency \r\n        currencyValue={currencyValue}\r\n        setCurrencyValue={setCurrencyValue}  \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    navigation: state.navigation,\r\n    interval: state.interval,\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = (\r\n  {\r\n    updateInterval,\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { combineReducers, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport currencyReducer from './reducers/currencyReducer';\r\nimport navigationReducer from './reducers/navigationReducer';\r\nimport intervalReducer from './reducers/intervalReducer';\r\n\r\nconst reducer = combineReducers({\r\n  currency: currencyReducer,\r\n  navigation: navigationReducer,\r\n  interval: intervalReducer,\r\n});\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst render = () => {\r\n  console.log(store.getState());\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n  );\r\n};\r\n\r\nrender();\r\nstore.subscribe(render);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}